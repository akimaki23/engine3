/*
 *	engine/core/ManagedObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "ManagedObject.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

/*
 *	ManagedObjectStub
 */

ManagedObject::ManagedObject() {
	_impl = new ManagedObjectImplementation();
	_impl->_setStub(this);
}

ManagedObject::ManagedObject(DummyConstructorParameter* param) {
	_impl = NULL;
}

ManagedObject::~ManagedObject() {
}


void ManagedObject::_lock(bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		((ManagedObjectImplementation*) _impl)->lock(doLock);
}

void ManagedObject::_lock(ManagedObject* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((ManagedObjectImplementation*) _impl)->lock(obj);
}

void ManagedObject::_rlock(bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		((ManagedObjectImplementation*) _impl)->rlock(doLock);
}

void ManagedObject::_wlock(bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		((ManagedObjectImplementation*) _impl)->wlock(doLock);
}

void ManagedObject::_wlock(ManagedObject* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((ManagedObjectImplementation*) _impl)->wlock(obj);
}

void ManagedObject::_unlock(bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		((ManagedObjectImplementation*) _impl)->unlock(doLock);
}

void ManagedObject::_runlock(bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		((ManagedObjectImplementation*) _impl)->runlock(doLock);
}

void ManagedObject::_setLockName(const String& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		((ManagedObjectImplementation*) _impl)->setLockName(name);
}

void ManagedObject::writeObject(String& data) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addAsciiParameter(data);

		method.executeWithVoidReturn();
	} else
		((ManagedObjectImplementation*) _impl)->writeObject(data);
}

void ManagedObject::writeObject(ObjectOutputStream* stream) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((ManagedObjectImplementation*) _impl)->writeObject(stream);
}

void ManagedObject::readObject(const String& data) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addAsciiParameter(data);

		method.executeWithVoidReturn();
	} else
		((ManagedObjectImplementation*) _impl)->readObject(data);
}

void ManagedObject::readObject(ObjectInputStream* stream) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((ManagedObjectImplementation*) _impl)->readObject(stream);
}

void ManagedObject::initializeTransientMembers() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		method.executeWithVoidReturn();
	} else
		((ManagedObjectImplementation*) _impl)->initializeTransientMembers();
}

void ManagedObject::updateToDatabase() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);

		method.executeWithVoidReturn();
	} else
		((ManagedObjectImplementation*) _impl)->updateToDatabase();
}

void ManagedObject::queueUpdateToDatabaseTask() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);

		method.executeWithVoidReturn();
	} else
		((ManagedObjectImplementation*) _impl)->queueUpdateToDatabaseTask();
}

void ManagedObject::clearUpdateToDatabaseTask() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);

		method.executeWithVoidReturn();
	} else
		((ManagedObjectImplementation*) _impl)->clearUpdateToDatabaseTask();
}

bool ManagedObject::isPersistent() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);

		return method.executeWithBooleanReturn();
	} else
		return ((ManagedObjectImplementation*) _impl)->isPersistent();
}

int ManagedObject::getPersistenceLevel() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);

		return method.executeWithSignedIntReturn();
	} else
		return ((ManagedObjectImplementation*) _impl)->getPersistenceLevel();
}

void ManagedObject::setPersistent(int level) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);
		method.addSignedIntParameter(level);

		method.executeWithVoidReturn();
	} else
		((ManagedObjectImplementation*) _impl)->setPersistent(level);
}

/*
 *	ManagedObjectImplementation
 */

ManagedObjectImplementation::ManagedObjectImplementation(DummyConstructorParameter* param) {
	_initializeImplementation();
}

ManagedObjectImplementation::~ManagedObjectImplementation() {
}


void ManagedObjectImplementation::finalize() {
}

void ManagedObjectImplementation::_initializeImplementation() {
	_setClassHelper(ManagedObjectHelper::instance());

	_serializationHelperMethod();
}

void ManagedObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (ManagedObject*) stub;
}

DistributedObjectStub* ManagedObjectImplementation::_getStub() {
	return _this;
}

ManagedObjectImplementation::operator const ManagedObject*() {
	return _this;
}

void ManagedObjectImplementation::_serializationHelperMethod() {
	_setClassName("ManagedObject");

	addSerializableVariable("persistenceLevel", &persistenceLevel);
}

ManagedObjectImplementation::ManagedObjectImplementation() {
	_initializeImplementation();
	// engine/core/ManagedObject.idl(21):  		persistenceLevel = 0;
	persistenceLevel = 0;
	// engine/core/ManagedObject.idl(23):  		updateToDatabaseTask = null;
	updateToDatabaseTask = NULL;
}

void ManagedObjectImplementation::writeObject(String& data) {
	// engine/core/ManagedObject.idl(51):  		Serializable.writeObject(data);
	Serializable::writeObject(data);
}

void ManagedObjectImplementation::writeObject(ObjectOutputStream* stream) {
	// engine/core/ManagedObject.idl(56):  		Serializable.writeObject(stream);
	Serializable::writeObject(stream);
}

void ManagedObjectImplementation::readObject(const String& data) {
	// engine/core/ManagedObject.idl(60):  		Serializable.readObject(data);
	Serializable::readObject(data);
	// engine/core/ManagedObject.idl(62):  		initializeTransientMembers();
	initializeTransientMembers();
}

void ManagedObjectImplementation::readObject(ObjectInputStream* stream) {
	// engine/core/ManagedObject.idl(67):  		Serializable.readObject(stream);
	Serializable::readObject(stream);
	// engine/core/ManagedObject.idl(69):  		initializeTransientMembers();
	initializeTransientMembers();
}

void ManagedObjectImplementation::clearUpdateToDatabaseTask() {
	// engine/core/ManagedObject.idl(78):  		updateToDatabaseTask = null;
	updateToDatabaseTask = NULL;
}

bool ManagedObjectImplementation::isPersistent() {
	// engine/core/ManagedObject.idl(82):  		return persistenceLevel != 0;
	return persistenceLevel != 0;
}

int ManagedObjectImplementation::getPersistenceLevel() {
	// engine/core/ManagedObject.idl(86):  		return persistenceLevel;
	return persistenceLevel;
}

/*
 *	ManagedObjectAdapter
 */

ManagedObjectAdapter::ManagedObjectAdapter(ManagedObjectImplementation* obj) : DistributedObjectAdapter((DistributedObjectServant*) obj) {
}

Packet* ManagedObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		lock(inv->getBooleanParameter());
		break;
	case 7:
		lock((ManagedObject*) inv->getObjectParameter());
		break;
	case 8:
		rlock(inv->getBooleanParameter());
		break;
	case 9:
		wlock(inv->getBooleanParameter());
		break;
	case 10:
		wlock((ManagedObject*) inv->getObjectParameter());
		break;
	case 11:
		unlock(inv->getBooleanParameter());
		break;
	case 12:
		runlock(inv->getBooleanParameter());
		break;
	case 13:
		setLockName(inv->getAsciiParameter(_param0_setLockName__String_));
		break;
	case 14:
		writeObject(inv->getAsciiParameter(_param0_writeObject__String_));
		break;
	case 15:
		readObject(inv->getAsciiParameter(_param0_readObject__String_));
		break;
	case 16:
		initializeTransientMembers();
		break;
	case 17:
		updateToDatabase();
		break;
	case 18:
		queueUpdateToDatabaseTask();
		break;
	case 19:
		clearUpdateToDatabaseTask();
		break;
	case 20:
		resp->insertBoolean(isPersistent());
		break;
	case 21:
		resp->insertSignedInt(getPersistenceLevel());
		break;
	case 22:
		setPersistent(inv->getSignedIntParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void ManagedObjectAdapter::lock(bool doLock) {
	((ManagedObjectImplementation*) impl)->lock(doLock);
}

void ManagedObjectAdapter::lock(ManagedObject* obj) {
	((ManagedObjectImplementation*) impl)->lock(obj);
}

void ManagedObjectAdapter::rlock(bool doLock) {
	((ManagedObjectImplementation*) impl)->rlock(doLock);
}

void ManagedObjectAdapter::wlock(bool doLock) {
	((ManagedObjectImplementation*) impl)->wlock(doLock);
}

void ManagedObjectAdapter::wlock(ManagedObject* obj) {
	((ManagedObjectImplementation*) impl)->wlock(obj);
}

void ManagedObjectAdapter::unlock(bool doLock) {
	((ManagedObjectImplementation*) impl)->unlock(doLock);
}

void ManagedObjectAdapter::runlock(bool doLock) {
	((ManagedObjectImplementation*) impl)->runlock(doLock);
}

void ManagedObjectAdapter::setLockName(const String& name) {
	((ManagedObjectImplementation*) impl)->setLockName(name);
}

void ManagedObjectAdapter::writeObject(String& data) {
	((ManagedObjectImplementation*) impl)->writeObject(data);
}

void ManagedObjectAdapter::readObject(const String& data) {
	((ManagedObjectImplementation*) impl)->readObject(data);
}

void ManagedObjectAdapter::initializeTransientMembers() {
	((ManagedObjectImplementation*) impl)->initializeTransientMembers();
}

void ManagedObjectAdapter::updateToDatabase() {
	((ManagedObjectImplementation*) impl)->updateToDatabase();
}

void ManagedObjectAdapter::queueUpdateToDatabaseTask() {
	((ManagedObjectImplementation*) impl)->queueUpdateToDatabaseTask();
}

void ManagedObjectAdapter::clearUpdateToDatabaseTask() {
	((ManagedObjectImplementation*) impl)->clearUpdateToDatabaseTask();
}

bool ManagedObjectAdapter::isPersistent() {
	return ((ManagedObjectImplementation*) impl)->isPersistent();
}

int ManagedObjectAdapter::getPersistenceLevel() {
	return ((ManagedObjectImplementation*) impl)->getPersistenceLevel();
}

void ManagedObjectAdapter::setPersistent(int level) {
	((ManagedObjectImplementation*) impl)->setPersistent(level);
}

/*
 *	ManagedObjectHelper
 */

ManagedObjectHelper* ManagedObjectHelper::staticInitializer = ManagedObjectHelper::instance();

ManagedObjectHelper::ManagedObjectHelper() {
	className = "ManagedObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void ManagedObjectHelper::finalizeHelper() {
	ManagedObjectHelper::finalize();
}

DistributedObject* ManagedObjectHelper::instantiateObject() {
	return new ManagedObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* ManagedObjectHelper::instantiateServant() {
	return new ManagedObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ManagedObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ManagedObjectAdapter((ManagedObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

