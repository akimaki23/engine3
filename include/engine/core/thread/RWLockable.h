/*
 *	engine/core/thread/RWLockable.h generated by engine3 IDL compiler 0.55
 */

#ifndef RWLOCKABLE_H_
#define RWLOCKABLE_H_

#include "engine/orb/DistributedObjectBroker.h"

namespace engine {
namespace core {
namespace thread {

class RWLockable : public DistributedObjectStub {
protected:
	RWLockable();
	RWLockable(DistributedObjectServant* obj);
	RWLockable(RWLockable& ref);

	virtual ~RWLockable();

public:
	RWLockable* clone();

	void wlock(bool doLock = true);

	void wlock(RWLockable* lock);

	void unlock(bool doLock = true);

	void setLockName(const string& name);

	friend class RWLockableHelper;
};

class RWLockableImplementation;

class RWLockableAdapter : public DistributedObjectAdapter {
public:
	RWLockableAdapter(RWLockableImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void wlock(bool doLock);

	void wlock(RWLockable* lock);

	void unlock(bool doLock);

	void setLockName(const string& name);

protected:
	string _param0_setLockName__string_;
};

class RWLockableHelper : public DistributedObjectClassHelper, public Singleton<RWLockableHelper> {
public:
	RWLockableHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectServant* obj);

	friend class SingletonWrapper<RWLockableHelper>;
};

class RWLockableServant : public DistributedObjectServant {
public:
	RWLockable* _this;

public:
	RWLockableServant();
	virtual ~RWLockableServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

} // namespace thread
} // namespace core
} // namespace engine

using namespace engine::core::thread;

#endif /*RWLOCKABLE_H_*/
